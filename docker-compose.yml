services:
  app:
    build: .
    container_name: api-server
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/usr/src
    depends_on:
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      qdrant:
        condition: service_started
      celery-worker:
        condition: service_started
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    container_name: redis-broker
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery-worker:
    build: .
    container_name: celery-worker
    environment:
      - PYTHONPATH=/usr/src
    # Celery 앱 경로를 'app.worker' 모듈로 복원합니다.
    command: python -m celery -A app.worker worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: meilisearch
    ports:
      - "7700:7700"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - meili_data:/meili_data
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    environment:
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 10s
      retries: 15
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  flower:
    image: mher/flower
    container_name: flower-monitor
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis-broker:6379/0
      - FLOWER_PORT=5555
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis_data:
  meili_data:
  qdrant_data: