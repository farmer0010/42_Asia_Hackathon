services:
  app:
    build: .
    container_name: api-server
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/usr/src
      - OLLAMA_BASE_URL=http://ollama:11434
      - LLM_MODEL_NAME=gemma3-custom
      - EMBEDDING_MODEL_NAME=mxbai-embed-large-custom
      # ★★★ 추가: Celery/Redis 관련 환경변수 (main.py에서 사용될 수 있음)
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      qdrant:
        condition: service_started
      celery-worker:
        condition: service_started
      ollama:
        condition: service_healthy
    restart: unless-stopped

  redis: # <-- 서비스 이름 'redis'
    image: "redis:alpine"
    container_name: redis-broker # 컨테이너 이름은 그대로 둬도 괜찮습니다.
    ports:
      - "6381:6379" # ★★★ 수정: 올바른 포트 매핑 (PC 6380 <-> 컨테이너 6379)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery-worker:
    build: .
    container_name: celery-worker
    environment:
      - PYTHONPATH=/usr/src
      # ★★★ 수정: 서비스 이름 'redis' 사용
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - LLM_MODEL_NAME=gemma3-custom
      - EMBEDDING_MODEL_NAME=mxbai-embed-large-custom
    command: python -m celery -A app.worker worker --loglevel=info
    depends_on:
      redis: # 서비스 이름 'redis' 사용
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped

  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: meilisearch
    ports:
      - "7700:7700"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - meili_data:/meili_data
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    environment:
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 10s
      retries: 15
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  flower:
    image: mher/flower
    container_name: flower-monitor
    ports:
      - "5555:5555"
    environment:
      # ★★★ 수정: 서비스 이름 'redis' 사용
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    depends_on:
      - redis # 서비스 이름 'redis' 사용
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - 'C:\Users\김주영\.ollama:/root/.ollama'
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  redis_data:
  meili_data:
  qdrant_data: