name: Express Release (Simplified)

on:
  push:
    tags:
      - 'v*-express'  # Use -express suffix for simplified releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.7.2)'
        required: true
        type: string

jobs:
  # Simplified 3-gate process for when you're confident
  express-release:
    name: "⚡ Express Release - 3 Essential Gates"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: "⚡ ESSENTIAL GATE 1/3: Build & Test"
        run: |
          echo "::group::Essential Gate 1: Build & Test"
          echo "🔨 Building with all features..."
          cargo build --release --all-features
          
          echo "🧪 Running test suite..."
          cargo test --all-features
          
          echo "✅ Build and tests completed"
          echo "::endgroup::"

      - name: "⚡ ESSENTIAL GATE 2/3: Package Validation"
        run: |
          echo "::group::Essential Gate 2: Package"
          echo "📦 Validating package contents..."
          
          # Quick package validation
          cargo package --allow-dirty --list > package_contents.txt
          
          # Check for critical files
          if grep -q "templates.*docker.*Dockerfile" package_contents.txt; then
            echo "✅ Templates included"
          else
            echo "❌ Missing templates"
            exit 1
          fi
          
          # Check binary size
          size=$(stat -c%s target/release/shimmy 2>/dev/null || echo "0")
          max_size=$((20 * 1024 * 1024))
          if [ "$size" -gt "$max_size" ]; then
            echo "❌ Binary too large: ${size} > ${max_size}"
            exit 1
          fi
          
          echo "✅ Package validation completed"
          echo "::endgroup::"

      - name: "⚡ ESSENTIAL GATE 3/3: Documentation"
        run: |
          echo "::group::Essential Gate 3: Documentation"
          echo "📚 Building documentation..."
          cargo doc --all-features --no-deps
          echo "✅ Documentation completed"
          echo "::endgroup::"

      - name: "🚀 EXPRESS RELEASE SUCCESS"
        run: |
          echo "::group::Express Release Complete"
          echo "✅ ALL 3 ESSENTIAL GATES PASSED"
          echo "🚀 Express release successful!"
          echo "⚡ Completed in ~3 minutes vs ~10 minutes for full gates"
          echo "::endgroup::"

      # Create GitHub release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Express Release ${{ github.ref_name }}
            
            This release was created using the simplified express release process.
            
            ⚡ **Express Gates Passed:**
            - ✅ Build & Test (all features)
            - ✅ Package Validation (templates + size)
            - ✅ Documentation Build
            
            📦 **Installation:**
            ```bash
            cargo install shimmy
            ```
            
            🔧 **Features:**
            - Full shimmy functionality
            - All backends available
            - Production ready
            
            ---
            *Created with Express Release workflow*
          draft: false
          prerelease: false

      # Upload release artifacts
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/shimmy
          asset_name: shimmy-linux-x86_64
          asset_content_type: application/octet-stream